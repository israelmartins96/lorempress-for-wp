{"version":3,"file":"lorempress-dummy-text-generator.min.js","sources":["lorempress-dummy-text-generator.min.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\n/**\r\n * lorempress-dummy-text-generator.js\r\n * \r\n * Generates random dummy text.\r\n */\n\n/**\r\n * Initialises the LoremPress text generator.\r\n * \r\n * Sets up constants, helper functions, and triggers the text generation process.\r\n */\nvar initLoremPressGenerator = function initLoremPressGenerator() {\n  /**\r\n   * @type {string} theParagraph - Stores the generated paragraph.\r\n   */\n  var theParagraph;\n\n  /**\r\n   * @type {Array<string>} arrayOfParagraphs - Stores an array of generated paragraphs.\r\n   */\n  var arrayOfParagraphs = [];\n\n  /**\r\n   * @type {number} paragraphIndex - Tracks the current index for placing paragraphs into the DOM.\r\n   */\n  var paragraphIndex = 0;\n\n  /**\r\n   * Configuration constants for text generation.\r\n   */\n  var minSentenceWords = 11;\n  var maxSentenceWords = 20;\n  var minParagraphSentences = 7;\n  var maxParagraphSentences = 10;\n\n  /**\r\n   * Generates a random floating-point number between 0 (inclusive) and 1 (exclusive).\r\n   * \r\n   * @returns {number} A random number.\r\n   */\n  var randomNumber = function randomNumber() {\n    return Math.random();\n  };\n\n  /**\r\n   * Generates a random integer between 0 (inclusive) and 9 (inclusive).\r\n   * \r\n   * @returns {number} A random integer.\r\n   */\n  var randomInteger = function randomInteger() {\n    return Math.floor(randomNumber() * 10);\n  };\n\n  /**\r\n   * Restricts a random integer to be within a specified minimum and maximum range.\r\n   * \r\n   * @param {number} min - The minimum allowed value.\r\n   * @param {number} max - The maximum allowed value.\r\n   * \r\n   * @returns {number} A random integer within the specified range.\r\n   */\n  var restrictRandomIntegerToRange = function restrictRandomIntegerToRange(min, max) {\n    return Math.min(Math.max(min, randomInteger()), max);\n  };\n\n  /**\r\n   * Selects a random array element based on a randomly generated index.\r\n   * \r\n   * @param {Array<Object>} array - An array of objects.\r\n   * \r\n   * @returns {Object} A randomly selected object from the array.\r\n   */\n  var pickRandomArrayIndex = function pickRandomArrayIndex(array) {\n    var minIndex = 0;\n    var maxIndex = array.length - 1;\n\n    /**\r\n     * Get a random index within the bounds of the array length.\r\n     */\n    var selectedItemIndex = restrictRandomIntegerToRange(minIndex, maxIndex);\n    return array[selectedItemIndex];\n  };\n\n  /**\r\n   * Converts a string into an array of words, split by spaces.\r\n   * \r\n   * @param {string} string - The input string.\r\n   * \r\n   * @returns {Array<string>} An array of words.\r\n   */\n  var convertStringToArray = function convertStringToArray(string) {\n    return string.split(' ');\n  };\n\n  /**\r\n   * Gets the index of the last element in an array.\r\n   * \r\n   * @param {Array<any>} array - The input array.\r\n   * \r\n   * @returns {number} The index of the last element.\r\n   */\n  var getLastArrayIndex = function getLastArrayIndex(array) {\n    var lastArrayIndex = array.length - 1;\n    return lastArrayIndex;\n  };\n\n  /**\r\n   * Generates a random valid index for a given array.\r\n   * \r\n   * @param {Array<any>} array - The input array.\r\n   * \r\n   * @returns {number} A random index within the array's bounds.\r\n   */\n  var getRandomArrayIndex = function getRandomArrayIndex(array) {\n    var lastArrayIndex = getLastArrayIndex(array);\n    return restrictRandomIntegerToRange(0, lastArrayIndex);\n  };\n\n  /**\r\n   * Determines a random word count for a sentence based on the predefined min/max values.\r\n   * \r\n   * @returns {number} The random word count for a sentence.\r\n   */\n  var pickRandomSentenceWordCount = function pickRandomSentenceWordCount() {\n    return restrictRandomIntegerToRange(minSentenceWords, maxSentenceWords);\n  };\n\n  /**\r\n   * Determines a random sentence count for a paragraph based on the predefined min/max values.\r\n   * \r\n   * @returns {number} The random sentence count for a paragraph.\r\n   */\n  var pickRandomSentenceCount = function pickRandomSentenceCount() {\n    return restrictRandomIntegerToRange(minParagraphSentences, maxParagraphSentences);\n  };\n\n  /**\r\n   * Capitalises the first letter of a given string.\r\n   * \r\n   * @param {string} string - The input string.\r\n   * \r\n   * @returns {string} The string with its first letter capitalized.\r\n   */\n  var capitaliseFirstLetter = function capitaliseFirstLetter(string) {\n    /**\r\n     * Handle empty string case.\r\n     */\n    if (!string) {\n      return '';\n    }\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  /**\r\n   * Constructs a random sentence from an array of words.\r\n   * \r\n   * The sentence will have a random word count and unique words, and will be capitalised and end with a period.\r\n   * \r\n   * @param {Array<string>} array - The source array of words.\r\n   * \r\n   * @returns {string} A randomly constructed sentence.\r\n   */\n  var constructRandomSentenceFromArray = function constructRandomSentenceFromArray(arrayOfWords) {\n    var sentenceWords = [];\n    var theSentence;\n    var sentenceWordCount = pickRandomSentenceWordCount();\n\n    /**\r\n     * Helper function to get a random index from the main word array.\r\n     * \r\n     * @returns {number} A random index.\r\n     */\n    var arrayIndex = function arrayIndex() {\n      return getRandomArrayIndex(arrayOfWords);\n    };\n\n    /**\r\n     * Populate sentenceWords with random words until the desired number of words is reached.\r\n     */\n    while (sentenceWordCount > sentenceWords.length) {\n      sentenceWords.push(arrayOfWords[arrayIndex()]);\n    }\n\n    /**\r\n     * Remove duplicate words from the sentence, maintaining order of first appearance.\r\n     */\n    sentenceWords.reduce(function (nonRepeatingArray, arrayItem) {\n      if (nonRepeatingArray.indexOf(arrayItem) === -1) {\n        nonRepeatingArray.push(arrayItem);\n      }\n\n      /**\r\n       * Update sentenceWords to contain only unique words.\r\n       */\n      sentenceWords = nonRepeatingArray;\n      return nonRepeatingArray;\n    }, []);\n\n    /**\r\n     * Join the unique words to form the base sentence.\r\n     */\n    theSentence = sentenceWords.join(' ');\n\n    /**\r\n     * Capitalise the first letter of the sentence\r\n     */\n    theSentence = capitaliseFirstLetter(theSentence);\n\n    /**\r\n     * Add a period at the end of the sentence.\r\n     */\n    theSentence += '.';\n    return theSentence;\n  };\n\n  /**\r\n   * @constant {string} loremPressShortcodeParagraphClass - The CSS class used to identify paragraphs where dummy text should be inserted.\r\n   */\n  var loremPressShortcodeParagraphClass = '.lorempress-shortcode-pargraph';\n\n  /**\r\n   * @type {NodeListOf<Element>} loremPressShortcodeParagraphs - A NodeList of all elements matching the shortcode paragraph class.\r\n   */\n  var loremPressShortcodeParagraphs = document.querySelectorAll(loremPressShortcodeParagraphClass);\n\n  /**\r\n   * Fetches dummy text data, processes it, and generates paragraphs to be inserted into the DOM.\r\n   * \r\n   * This function is recursive to fill all target paragraphs.\r\n   */\n  var _generateText = function generateText() {\n    var xhr = new XMLHttpRequest();\n\n    /**\r\n     * loremPressData is made globally available via wp_localize_script from the main plugin file (lorempress-for-wp.php).\r\n     * \r\n     * It contains the base URL for the plugin.\r\n     */\n    var baseURL = loremPressData.pluginURL;\n    var dataPath = 'assets/data/lorempress-dummy-text-source.json';\n\n    /**\r\n     * Open an asynchronous GET request to the JSON data file.\r\n     */\n    xhr.open('GET', baseURL + dataPath, true);\n\n    /**\r\n     * Event handler for when the XMLHttpRequest loads.\r\n     * Processes the response and outputs paragraphs to the DOM.\r\n     */\n    xhr.onload = function () {\n      /**\r\n       * Check if the request was successful (HTTP status 200 OK).\r\n       */\n      if (this.status === 200) {\n        /**\r\n         * Parse the JSON response text.\r\n         */\n        var responseText = JSON.parse(this.responseText);\n\n        /**\r\n         * Pick a random string of words from the response data.\r\n         */\n        var stringOfWords = pickRandomArrayIndex(responseText).words;\n\n        /**\r\n         * Convert the string of words into an array of individual words.\r\n         */\n        var arrayOfWords = convertStringToArray(stringOfWords);\n        var arrayOfSentences = [];\n\n        /**\r\n         * Construct sentences until the desired number of sentences is reached.\r\n         */\n        while (arrayOfSentences.length < pickRandomSentenceCount()) {\n          arrayOfSentences.push(constructRandomSentenceFromArray(arrayOfWords));\n        }\n\n        /**\r\n         * Join the sentences to form a paragraph.\r\n         */\n        theParagraph = arrayOfSentences.join(' ');\n\n        /**\r\n         * Check if there are more target paragraphs than already generated paragraphs.\r\n         */\n        if (loremPressShortcodeParagraphs.length > arrayOfParagraphs.length) {\n          /**\r\n           * Add the newly generated paragraph to the array of paragraphs.\r\n           */\n          arrayOfParagraphs.push(theParagraph);\n\n          /**\r\n           * Insert the generated paragraph text into the current target paragraph element.\r\n           */\n          loremPressShortcodeParagraphs[paragraphIndex].innerHTML = arrayOfParagraphs[paragraphIndex];\n\n          /**\r\n           * If there are still more paragraphs to generate, increment the index.\r\n           */\n          if (loremPressShortcodeParagraphs.length > arrayOfParagraphs.length) {\n            paragraphIndex++;\n          }\n\n          /**\r\n           * Recursively call generateText to populate the next paragraph.\r\n           */\n          return _generateText();\n        }\n      }\n    };\n\n    /**\r\n     * Send the XMLHttpRequest.\r\n     */\n    xhr.send();\n  };\n\n  /**\r\n   * Initial call to start the text generation process.\r\n   */\n  _generateText();\n};\n\n/**\r\n * Trigger the initialization of the LoremPress generator once the entire HTML document has been completely loaded and parsed.\r\n */\ndocument.addEventListener('DOMContentLoaded', initLoremPressGenerator);\n\n},{}]},{},[1]);\n"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","document","addEventListener","constructRandomSentenceFromArray","arrayOfWords","theSentence","sentenceWords","sentenceWordCount","pickRandomSentenceWordCount","push","getRandomArrayIndex","reduce","nonRepeatingArray","arrayItem","indexOf","join","capitaliseFirstLetter","_generateText","xhr","XMLHttpRequest","baseURL","loremPressData","pluginURL","open","onload","this","status","responseText","JSON","parse","maxIndex","restrictRandomIntegerToRange","words","split","arrayOfSentences","minParagraphSentences","maxParagraphSentences","theParagraph","loremPressShortcodeParagraphs","arrayOfParagraphs","paragraphIndex","innerHTML","send","minSentenceWords","maxSentenceWords","randomNumber","Math","random","randomInteger","floor","min","max","getLastArrayIndex","array","lastArrayIndex","string","charAt","toUpperCase","slice","querySelectorAll"],"mappings":"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"}